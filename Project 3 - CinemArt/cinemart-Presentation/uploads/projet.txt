package fr.isika.cdi07.model.projet;

import java.util.ArrayList;
import java.util.List;

import javax.persistence.CascadeType;
import javax.persistence.Entity;
import javax.persistence.EnumType;
import javax.persistence.Enumerated;
import javax.persistence.Id;
import javax.persistence.JoinColumn;
import javax.persistence.ManyToOne;
import javax.persistence.OneToMany;
import javax.persistence.OneToOne;
import javax.validation.constraints.NotNull;

import fr.isika.cdi07.model.exceptions.IllegalAttributeSizeException;
import fr.isika.cdi07.model.messagerie.Commentaire;
import fr.isika.cdi07.model.utilisateur.PortFolio;
import fr.isika.cdi07.model.utilisateur.Utilisateur;

@Entity
public class Projet {
	//@GeneratedValue(strategy=GenerationType.AUTO)
	@Id    
	@NotNull
	private Long idProjet;
	@NotNull
	@Enumerated(EnumType.STRING)
	private ProjetStatut projetStatut;
	@NotNull
	private String titre;
	@NotNull
	private String courteDescription;
	@NotNull
	private String longueDescription;
	private String webLink;
	private int cagnotte;
	@OneToMany
	@JoinColumn(name = "cat_do_id")
	private List<ProjetCategorie> categories;
	@OneToMany
	private List<ProjetGenre> genres;
	@OneToMany
	private List<Commentaire> commentaire;

	@ManyToOne
	@JoinColumn(name = "feeds_do_id")
	private PortFolio portfolio;

	@ManyToOne
	private Utilisateur utilisateur;
	private int montantDemande;

	public Projet() {
	}

	public Projet(@NotNull ProjetStatut projetStatut, @NotNull String titre, @NotNull String courteDescription,
			@NotNull String longueDescription, String webLink) {
		super();
		this.projetStatut = projetStatut;
		this.titre = titre;
		this.courteDescription = courteDescription;
		this.longueDescription = longueDescription;
		this.webLink = webLink;
	}

	public Projet(@NotNull Long idProjet, ProjetStatut projetStatut, String titre, String courteDescription, 
			String longueDescription, String webLink, Utilisateur utilisateur, PortFolio portfolio) {
		super();
		this.idProjet = idProjet;
		this.projetStatut = projetStatut;
		this.titre = titre;
		this.courteDescription = courteDescription;
		this.longueDescription = longueDescription;
		this.webLink = webLink;
		this.utilisateur = utilisateur;
		this.portfolio = portfolio;
	}

	public Projet(@NotNull Long idProjet, ProjetStatut projetStatut, String titre, String courteDescription,
			String longueDescription, String webLink, PortFolio portfolio, int montantDemande) {
		super();
		this.idProjet = idProjet;
		this.projetStatut = projetStatut;
		this.titre = titre;
		this.courteDescription = courteDescription;
		this.longueDescription = longueDescription;
		this.webLink = webLink;
		this.portfolio = portfolio;
		this.montantDemande = montantDemande;
	}
	
	public Projet(@NotNull @NotNull Long idProjet, @NotNull ProjetStatut projetStatut, List<ProjetCategorie> categories, List<ProjetGenre> genres, @NotNull String titre,
			@NotNull String courteDescription, @NotNull String longueDescription, String webLink, int cagnotte,
			List<Commentaire> commentaire, PortFolio portfolio, Utilisateur utilisateur, int montantDemande) {
		super();
		this.idProjet = idProjet;
		this.projetStatut = projetStatut;
		this.categories = categories;
		this.genres = genres;
		this.titre = titre;
		this.courteDescription = courteDescription;
		this.longueDescription = longueDescription;
		this.webLink = webLink;
		this.cagnotte = cagnotte;
		this.commentaire = commentaire;
		this.portfolio = portfolio;
		this.utilisateur = utilisateur;
		this.montantDemande = montantDemande;
	}
	
	

	public void augmenteCagnotte(int montant) {
		this.cagnotte = this.cagnotte + montant;	
	}
	
	public Projet createProjetWithId(@NotNull Long id) {
		this.idProjet = id;
		return this;
	}

	/***** GETTER ****/
	
	public String getCourteDescription() {
		return courteDescription;
	}
	public String getLongueDescription() {
		return longueDescription;
	}
	public ProjetStatut getProjetStatut() {
		return projetStatut;
	}
	public String getTitre() {
		return this.titre;
	}
	public int getCagnotte() {

		return this.cagnotte;
	}
	public @NotNull Long getIdProjet() {
		return this.idProjet;
	}
	public List<ProjetCategorie> getCategorie() {
		return categories;
	}
	public List<ProjetGenre> getGenres() {
		return genres;
	}
	public String getWebLink() {
		return webLink;
	}
	public Utilisateur getUtilisateur() {
		return utilisateur;
	}
	public int getMontantDemande() {
		return montantDemande;
	}
	public PortFolio getPortfolio() {
		return portfolio;
	}
	
	
	

	/**** AND SETTER ****/
	public void setTitre(String titre) throws IllegalAttributeSizeException{
		if (titre == null) throw  new IllegalAttributeSizeException("This element is null");
		if (titre.length() < 3) throw new IllegalAttributeSizeException("This element is too short (less than 3 chars)");
		if (titre.length() > 30) throw new IllegalAttributeSizeException("This element is too long (greater than 30 chars)");
		this.titre = titre;
	}
	
	public void setCourteDescription(String courteDescription) throws IllegalAttributeSizeException {
		if (courteDescription == null) throw new IllegalAttributeSizeException("this element is null");
		if (courteDescription.length() < 10)	throw new IllegalAttributeSizeException("This element is too short (less than 10 chars)");
		if (courteDescription.length() > 30) throw new IllegalAttributeSizeException("This element is too long (greater than 30 chars)");
		this.courteDescription = courteDescription;
	}

	public void setLongueDescription(String longueDescription) throws IllegalAttributeSizeException {
		if (longueDescription == null) throw new IllegalAttributeSizeException("this element is null");
		if (longueDescription.length() < 10) throw new IllegalAttributeSizeException("This element is too short (less than 50 chars)"); //Valeur min Ã  modifier
		if(longueDescription.length() > 10000) throw new IllegalAttributeSizeException("This element is too long (greater than 10000 chars)");			
		this.longueDescription = longueDescription;
	}

	public void setMontantDemande(int montantDemande) throws IllegalAttributeSizeException {
		if (montantDemande > 100 && montantDemande < 1000000) { // test unitaire superieur, inferieur, egaux, dans les chevrons 5 => 0 100 1 000 000 et 1 000 050 et 1000
			this.montantDemande = montantDemande;
		}
		else if(montantDemande < 100) {
			throw new IllegalAttributeSizeException("This element is too short (lesser than 100 euros)");
		}
		else {
			throw new IllegalAttributeSizeException("This element is too important (greater than 1000000 euros)");
		}
	}

	public void setWebLink(String webLink) {
		this.webLink = webLink;
	}

	public void setProjetStatut(ProjetStatut newStatus) {
		this.projetStatut = newStatus;
	}
	public void setCategorie(List<ProjetCategorie> categorie) {
		this.categories = categorie;
	}
	public void setGenres(List<ProjetGenre> genres) {
		this.genres = genres;
	}
}
